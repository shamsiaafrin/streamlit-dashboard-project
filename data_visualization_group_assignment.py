# -*- coding: utf-8 -*-
"""Data Visualization Group Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LNQgR6DnyQ22pi6WJ-3wCI3thzHkVucm

***Data Visualization Group Assignment***




> ```
Jobayrul Hasan || 251-25-001
Naima Azim || 251-25-008
Shamsia Afrin Jamema || 251-25-010
Mohammed Daud || 251-25-027
Md. Naib Hossain Khan || 251-25-039
Mohammad Abdur Rahman || 251-25-040
```
"""

from google.colab import drive
drive.mount('/content/drive')

"""---



---

# **Import Libraries & Load Dataset**

**Necessary Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import gdown
import ipywidgets as widgets
from IPython.display import display, HTML
from google.colab import files
from tabulate import tabulate
import warnings

"""**Dataset Load**"""

file_id = "1JDFDsM9H8fv7VI8DWJMI0MYpGsByvXGF"
file_url = f"https://drive.google.com/uc?id={file_id}"
output = "data.csv"

gdown.download(file_url, output, quiet=False)
df = pd.read_csv(output)

df.head()

"""# **Task-1: Data Preprocessing - Afrin**

**Initial Inspection**
"""

# Shape of the dataset
print(f"Initial Shape: {df.shape}")

# Null Values for Each Column
print(df.isnull().sum())

# Column data types
print("Data Types:\n",df.dtypes)

"""**Clean Missing/Invalid Entries, Transform Columns**"""

# Initial Exploration
print("Cleaned column names by removing whitespace:\n")
print(df.columns.str.strip())
df.columns = df.columns.str.strip()

# Missing data calculation
missing_df = pd.DataFrame({
    'column_name': df.columns,
    'missing_percentage': df.isnull().mean() * 100
}).sort_values('missing_percentage', ascending=False)

for _, row in missing_df.iterrows():
    print(f"{row['column_name']}: {row['missing_percentage']:.2f}%")

print(f"\nTotal Null Values: {df.isnull().sum().sum()}")

# Make a copy of main dataset
preData = df.copy()

# Convert numeric-looking object columns to float
for col in df.columns:
    if df[col].dtype == 'object':
        try:
            df[col] = df[col].str.replace(',', '', regex=False)
            df[col] = df[col].str.replace('$', '', regex=False)
            df[col] = pd.to_numeric(df[col])
        except:
            pass

# Handle 0.0 values
for col in df.columns:
    if df[col].dtype in [np.float64, np.int64]:
        df[col] = df[col].replace(0.0, np.nan)
        df[col] = df[col].fillna(df[col].median())
    else:
        df[col] = df[col].fillna(df[col].mode()[0])

# Fill missing values
for col in df.columns:
    if df[col].dtype in [np.float64, np.int64]:
        df[col] = df[col].fillna(df[col].median())
    else:
        df[col] = df[col].fillna(df[col].mode()[0])

print(f"Remaining nulls after cleaning: {df.isnull().sum().sum()}")

# Handle outliers (Inflation)
if 'Inflation' in df.columns and 'Country' in df.columns:
    inflation_others = df.loc[df['Country'] != 'Venezuela', 'Inflation']
    mean_inflation = inflation_others.mean()
    max_inflation = inflation_others.max()
    replacement_value = mean_inflation + max_inflation
    df.loc[df['Country'] == 'Venezuela', 'Inflation'] = round(replacement_value, 2)

# Change column data types
object_cols = ['Country', 'Region']
int_cols = [
    'Area (sqkm)', 'Population', 'Reserves (FE&Gold)','GDP Per Capita', 'Exports', 'Imports', 'Reserves',
    'External Debt', 'Electricity Generate (kW)', 'CO2 Emission (mt)', 'Broadband(FixedSubs)', 'Aiports'
]
float_cols = [
    'Median Age', 'Population Growth(%)', 'Birth Rate', 'Death Rate',
    'GDP Growth Rate', 'Inflation', 'Unemployment Rate', 'Education Expend (% of GDP)'
]

# Convert columns to correct data types
for col in object_cols:
    if col in df.columns:
        df[col] = df[col].astype(str)

for col in int_cols:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)

for col in float_cols:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce').round(2)

# Shape before & after cleaning
print(f"Dataset Shape-Before: {preData.shape}")
print(f"Dataset Shape-After: {df.shape}")

print("Remaining nulls:", df.isnull().sum().sum())

df.head()

"""**Basic Summaries**"""

# Summary Statistics
basicSummaries = df.describe(include='all')
basicSummaries = basicSummaries.applymap(lambda x: round(x, 2) if isinstance(x, (int, float)) else x)
#print("\nSummary Statistics:")
#print(basicSummaries.T)
display(HTML(''' <h3 style="text-align:center;">Summary Statistics</h3> <hr style="border:1px solid white;">'''))
display(basicSummaries.T)

# data_cleaned.columns = data_cleaned.columns.str.strip().str.lower().str.replace(' ', '_')
# print(data_cleaned.columns)

"""**Top 10 Rankings**"""

# Function for Top 10 Rankings
def topRank(df, value_col, country_col='country', top_n=10, title=None):
    df = df.dropna(subset=[value_col, country_col]).copy()
    df[value_col] = pd.to_numeric(df[value_col], errors='coerce')
    top = df.sort_values(by=value_col, ascending=False).head(top_n)
    top = top[[country_col, value_col]].reset_index(drop=True)
    top.index += 1
    top.columns = ['Country', value_col.replace('_', ' ').title()]

    display_df = top.copy()
    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=FutureWarning)
        display_df.iloc[:, 1] = display_df.iloc[:, 1].apply(lambda x: f"{int(x):,}")

    final_title = title if title else f"Top {top_n} Countries by {value_col.replace('_', ' ').title()}"
    print(f"\n{final_title}\n")
    print(tabulate(display_df, headers='keys', tablefmt='grid', showindex=True, numalign='right', stralign='left'))

# Top 10 Countries by Population
topRank(df, 'Population', country_col='Country')

# Top 10 Countries by GDP Growth Rate (%)
topRank(df, 'GDP Growth Rate', country_col='Country')

# Top 10 Countries by GDP Per Capita (USD)
topRank(df, 'GDP Per Capita', country_col='Country')

# Top 10 Countries by Reserves FE-Gold (Billion)
topRank(df, 'Reserves (FE&Gold)', country_col='Country')

# Top 10 Countries by CO2 Emission (Metric Ton)
topRank(df, 'CO2 Emission (mt)', country_col='Country')

# Snapshot of Cleaned Data
df.to_csv('/content/cleanData.csv', index=False)

print("\nSnapshot of Final Cleaned Dataset:")
print(df.head())

'''
# Save CSV file
df.to_csv('updated_dataset.csv', index=False)

# If in Colab, trigger download
from google.colab import files
files.download('updated_dataset.csv')
'''

"""# **Task-2: Univariate & Bivariate Visualization - Naima**"""

# For better visual quality
sns.set(style="whitegrid")

# Clean columns
print(df.columns)

"""**UNIVARIATE VISUALIZATIONS**"""

# Visualization of distribution (Histogram)
plt.figure(figsize=(8,5))
sns.histplot(df['GDP Per Capita'], bins=30, kde=False, color='skyblue')
plt.title('Histogram of GDP Per Capita')
plt.xlabel('GDP Per Capita ($)')
plt.ylabel('Frequency')
plt.show()

# Visualization of distribution (Boxplot)
plt.figure(figsize=(10,5))
sns.boxplot(x=df['Unemployment Rate'], color='lightgreen')
plt.title('Boxplot of Unemployment Rate')
plt.xlabel('Unemployment Rate')
plt.show()

# Visualization of distribution (KDE)
plt.figure(figsize=(8,5))
sns.kdeplot(df['Population Growth(%)'], fill=True, color='orange')
plt.title('KDE Plot of Population Growth Rate')
plt.xlabel('Percentage')
plt.ylabel('Density')
plt.show()

"""**BIVARIATE VISUALIZATIONS**


"""

# Scatter Plot: Alcohol Consumption vs Age Dependency Ratio
plt.figure(figsize=(8,5))
sns.scatterplot(x='Birth Rate', y='Death Rate', data=df)
plt.title('Birth Rate vs Death Rate')
plt.xlabel('Birth Rate')
plt.ylabel('Death Rate')
plt.show()

# Heatmap: Birth Rate vs Death Rate

plt.figure(figsize=(8,6))
corr_cols = ['Birth Rate', 'Death Rate', 'Population', 'Population Growth(%)']

# Calculate correlation
corr = df[corr_cols].corr()

# Shorten names directly
corr.columns = corr_cols
corr.index = corr_cols

sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Bivariate comparison using Violin Plot

top_countries = df['Country'].value_counts().head(5).index
subset = df[df['Country'].isin(top_countries)]

# Violin Plot: Birth Rate by Country (Top 5)

plt.figure(figsize=(10,6))
sns.violinplot(x='Country', y='Birth Rate', data=subset, palette='Set2')
plt.title('Birth Rate Distribution by Country')
plt.xlabel('Country')
plt.ylabel('Birth Rate')
plt.show()

"""**Relations Between Alcohol Consumption, Infant Deaths, and Age Dependency**"""

# Generate pairplot with short labels
plt.figure(figsize=(10, 8))
pair_grid = sns.pairplot(
    temp_df,
    corner=True,
    height=3,
    plot_kws={'s': 20, 'alpha': 0.7}
)

# Rotate x-axis labels if needed
for ax in pair_grid.axes.flatten():
    if ax:
        ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')

plt.suptitle('Pairplot with Shortened Labels', y=1.02)
plt.tight_layout()
plt.show()

"""**Scatter plot with regression line to highlight pattern**"""

plt.figure(figsize=(12,8))
ax = sns.scatterplot(
    x=age_dependency,
    y=alcohol_total,
    data=df,
    alpha=0.6,
    hue=df['country'].isin(top_countries),  # Highlight top countries
    palette={True: 'red', False: 'blue'},
    size=df[infant_deaths],  # Incorporate third variable via size
    sizes=(20, 200)
)
plt.title('Alcohol Consumption vs Age Dependency Ratio with Outliers')
plt.xlabel('Age Dependency Ratio (%)')
plt.ylabel('Alcohol Consumption (Liters per Capita)')

# Add legend
handles, labels = ax.get_legend_handles_labels()
plt.legend(
    handles[:2],
    ['Top 5 Country', 'Other Countries'],
    title='Country Status'
)
plt.show()

# Scatter plot with annotation of outliers
plt.figure(figsize=(12,8))
sns.scatterplot(
    x=age_dependency,
    y=alcohol_total,
    data=df,
    alpha=0.6
)
plt.title('Alcohol Consumption vs Age Dependency Ratio (Annotated Outliers)')
plt.xlabel('Age Dependency Ratio (%)')
plt.ylabel('Alcohol Consumption (Liters per Capita)')

# Add country labels to top 5 alcohol consumers
top_alcohol = df.nlargest(5, alcohol_total)
for _, row in top_alcohol.iterrows():
    plt.text(
        row[age_dependency]+0.5,
        row[alcohol_total],
        row['country'],
        fontsize=9,
        color='darkred'
    )
plt.show()

# Outlier Detection via Boxplot

plt.figure(figsize=(10,5))
sns.boxplot(x=df[alcohol_total])
plt.title('Boxplot Highlighting Outliers in Alcohol Consumption')
plt.xlabel('Alcohol Consumption (Liters per Capita)')
plt.show()

"""# **Task-3: Multi-dimensional or Interactive Plot - Naib**"""



"""# **Task-4: Time-Series or Geospatial Visualization - Jobayer**"""



"""# **Task-5: Dashboard - Riad**"""

!pip install streamlit

# Save as app.py and run using: streamlit run app.py
import streamlit as st
import plotly.express as px

st.title("Interactive Dashboard")

category = st.selectbox("Select Category:", df.select_dtypes(include='object').columns)
numeric = st.selectbox("Select Numeric Feature:", df.select_dtypes(include='number').columns)

st.subheader(f"Top Categories in {category}")
st.bar_chart(df[category].value_counts().head(10))

st.subheader(f"{numeric} Distribution")
fig = px.histogram(df, x=numeric, color=category)
st.plotly_chart(fig)